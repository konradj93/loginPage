{"version":3,"sources":["history.ts","lib/API.ts","context/userContext.ts","components/ErrorComponent/ErrorComponent.tsx","pages/LoginPage/LoginPage.tsx","pages/NotFound/NotFound.tsx","components/PrivateRoute/PrivateRoute.tsx","pages/Dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createBrowserHistory","logIn","data","axios","method","url","UserContext","React","createContext","isAuth","setAuth","auth","UserContextProvider","Provider","ErrorComponent","message","testid","className","data-testid","LoginSchema","yup","shape","email","required","password","min","matches","LoginPage","_","useContext","useState","wentWrong","setWentWrong","useForm","validationSchema","register","handleSubmit","errors","submitLogin","then","result","status","history","push","catch","onSubmit","form","name","type","ref","id","String","NotFound","PrivateRoute","props","useEffect","Dashboard","App","setAuthorization","value","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.0d338072.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import axios from 'axios';\nimport { LoginInterface } from '../interfaces/interfaces';\n\nconst logIn = (data: LoginInterface): Promise<any> => {\n    return axios({\n        method: 'POST',\n        url: `https://run.mocky.io/v3/1f6e033b-72ea-48e8-ad93-be5d356f7e44`,\n        data: {\n            ...data\n        }\n    })\n};\n\nexport default logIn;","import React from 'react';\nimport { UserContextInterface } from '../interfaces/interfaces';\n\nconst UserContext = React.createContext<UserContextInterface>({isAuth:false, setAuth(auth: boolean) {\n    }});\n\nexport const UserContextProvider = UserContext.Provider;\n\nexport default UserContext;","import React from 'react';\nimport './errorComponent.scss'\n\nconst ErrorComponent: React.FC<{message: string, testid: string}> = ({message, testid}) => {\n    return <div className=\"invalid-feedback\" data-testid={testid}>{ message }</div>\n}\n\nexport default ErrorComponent","import React, {useContext, useState} from 'react';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { LoginInterface } from '../../interfaces/interfaces';\nimport history from '../../history';\nimport logIn from '../../lib/API';\nimport UserContext from '../../context/userContext';\nimport './login.scss'\nimport ErrorComponent from '../../components/ErrorComponent/ErrorComponent';\n\nconst LoginSchema = yup.object().shape({\n    email: yup\n        .string()\n        .email()\n        .required(),\n    password: yup.string().min(8, 'Your password should be a minimum of 8 characters')\n        .matches(/(?:[0-9]+.*[A-Z]+)|(?:[A-Z]+.*[0-9]+)/,\n            `Your password should contain  at least 1 number and one upper letter`),\n});\n\nconst LoginPage: React.FC = _ => {\n    const {setAuth} = useContext(UserContext);\n    const [wentWrong, setWentWrong] = useState<string | null>(null)\n    const { register, handleSubmit, errors } = useForm<LoginInterface>({\n        validationSchema: LoginSchema,\n    });\n    const submitLogin = handleSubmit(({ email, password }):void => {\n        logIn({email, password})\n            .then((result) => {\n                result.status === 202 ? setAuth(true) : setWentWrong('Something went wrong please try again')\n                history.push('/dashboard')\n            })\n            .catch( _ => {\n                setWentWrong('Something went wrong please try again')\n            });\n    });\n    return <div className=\"loginPage\">\n        <div className=\"container h-100\">\n            <div className=\"row h-100 align-items-center justify-content-center\">\n                <div className=\"col-md-8\">\n                    <div className=\"loginFormWrapper\">\n                        <form onSubmit={submitLogin}>\n                            <div className=\"form-group\">\n\n                                <label form={'emailLogin'} >Login</label>\n                                <input name=\"email\" type=\"email\" ref={register}  id=\"emailLogin\"\n                                       className=\"form-control\" data-testid = \"email\"/>\n                                { errors.email &&\n                                <ErrorComponent testid={\"emailError\"} message={ String(errors.email.message) }/>}\n                            </div>\n                            <div className=\"form-group\">\n                                <label form={'loginPassword'}>Password</label>\n                                <input name=\"password\" type='password' ref={register} id={'loginPassword'}\n                                       className=\"form-control\"  data-testid = \"password\"/>\n                                { errors.password &&\n                                <ErrorComponent testid = {\"passwordError\"}\n                                                message={ String(errors.password.message) }/> }\n                            </div>\n                            <button type=\"submit\" data-testid = \"submit\" className={'btn btn-primary'} >\n                                Log In\n                            </button>\n                        </form>\n                        { wentWrong && <ErrorComponent testid={'submitIssue'} message={wentWrong} />}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n}\n\nexport default LoginPage","import React from 'react';\n\nconst NotFound: React.FC = _ => {\n    return <h3>Not Found</h3>\n}\n\nexport default NotFound","import * as React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router';\nimport {useContext, useEffect} from 'react';\nimport history from '../../history';\nimport UserContext from '../../context/userContext';\n\n\n\nexport const PrivateRoute: React.FC<RouteProps> = props => {\n    const {isAuth} = useContext(UserContext);\n    let redirectPath = '';\n\n    useEffect(()=>{\n        if(!isAuth){\n            history.push('/');\n        }\n    }, [isAuth]);\n\n    if (redirectPath) {\n        const renderComponent = () => <Redirect to={{ pathname: redirectPath }} />;\n        return <Route {...props} component={renderComponent} render={undefined} />;\n    } else {\n        return <Route {...props} />;\n    }\n};\n\nexport default PrivateRoute;\n","import React from 'react';\n\nconst Dashboard: React.FC = _ => {\n    return <h1>Welcome in private Path</h1>\n}\n\nexport default Dashboard;","import React, {useState} from 'react';\nimport { Switch, Route } from 'react-router';\nimport LoginPage from './pages/LoginPage/LoginPage';\nimport NotFound from './pages/NotFound/NotFound';\nimport { UserContextProvider } from './context/userContext';\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute';\nimport Dashboard from './pages/Dashboard/Dashboard';\n\n\nconst App: React.FC = _ => {\n    const [isAuth, setAuthorization] = useState<boolean>(false);\n    const setAuth = (auth:boolean):void => {\n        setAuthorization(auth)\n    }\n    return <UserContextProvider value={{\n        isAuth,\n        setAuth\n    }}>\n        <Switch>\n            <Route path='/' component={LoginPage} />\n            <PrivateRoute\n                path='/dashboard'\n                component={Dashboard}\n            />\n            <Route component={NotFound}/>\n        </Switch>;\n    </UserContextProvider>\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/custom.scss';\nimport {\n    Router,\n} from 'react-router-dom';\nimport history from './history';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}